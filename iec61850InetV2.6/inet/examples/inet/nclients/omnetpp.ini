#
# This ini file runs Telnet sessions on the NClients network, using
# TelnetApp+TCPGenericSrvApp.
#
# See also fileTransfer.ini and basicHTTP.ini for different kinds of
# network traffic.
#

[Config inet__inet]
description = "inet_TCP <---> inet_TCP"
# setting TCP stack implementation
**.srv*.tcpType = "TCP"
**.cli*.tcpType = "TCP"
#**.srv.numPcapRecorders = 1
#**.srv.pcapRecorder[0].pcapFile = "results/inet_srv.pcap"

[Config lwip__lwip]
description = "TCP_lwIP <---> TCP_lwIP"
# setting TCP stack implementation
**.srv*.tcpType = "TCP_lwIP"
**.cli*.tcpType = "TCP_lwIP"
#**.srv.numPcapRecorders = 1
#**.srv.pcapRecorder[0].pcapFile = "results/lwip_srv.pcap"

[Config lwip__inet]
description = "TCP_lwIP <---> inet_TCP"
# setting TCP stack implementation
**.srv*.tcpType = "TCP_lwIP"
**.cli*.tcpType = "TCP"

[Config inet__lwip]
description = "inet_TCP <---> TCP_lwIP"
# setting TCP stack implementation
**.srv*.tcpType = "TCP"
**.cli*.tcpType = "TCP_lwIP"

[General]
network = NClients
#debug-on-errors = true
tkenv-plugin-path = ../../../etc/plugins

sim-time-limit = 1000000s

# number of client computers
*.n = 4

# tcp apps
**.cli[*].numTcpApps = 1
**.cli[*].tcpApp[*].typename = "TelnetApp"
**.cli[*].tcpApp[0].localAddress = ""
**.cli[*].tcpApp[0].localPort = -1
**.cli[*].tcpApp[0].connectAddress = "srv"
**.cli[*].tcpApp[0].connectPort = 1000

**.cli[*].tcpApp[0].startTime = exponential(5s)
**.cli[*].tcpApp[0].numCommands = exponential(10)
**.cli[*].tcpApp[0].commandLength = exponential(10B)
**.cli[*].tcpApp[0].keyPressDelay = exponential(0.1s)
**.cli[*].tcpApp[0].commandOutputLength = exponential(40B)
**.cli[*].tcpApp[0].thinkTime = truncnormal(2s,3s)
**.cli[*].tcpApp[0].idleInterval = truncnormal(3600s,1200s)
**.cli[*].tcpApp[0].reconnectInterval = 30s
**.cli[*].tcpApp[0].dataTransferMode = "object"

**.srv.numTcpApps = 1
**.srv.tcpApp[*].typename = "TCPGenericSrvApp"
**.srv.tcpApp[0].localAddress = ""
**.srv.tcpApp[0].localPort = 1000
**.srv.tcpApp[0].replyDelay = 0

# NIC configuration
**.ppp[*].queueType = "DropTailQueue" # in routers
**.ppp[*].queue.frameCapacity = 10    # in routers

# turn on throughput stat
**.channel.throughput.result-recording-modes=+last
